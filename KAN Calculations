import torch
import numpy as np
from sklearn.preprocessing import StandardScaler
import pandas as pd
from kan import KAN
import torch.nn as nn

class KAN(nn.Module):
    def __init__(self):
        super(KAN, self).__init__()
        self.fc1 = nn.Linear(18, 10)  # Входной размер 19
        self.fc2 = nn.Linear(10, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

model = KAN()
model.load_state_dict(torch.load('C:/Users/User/Desktop/IVF/AI/DNN/Предсказания/Prediction_KAN.pth'))

# Загрузка данных из Excel-файла в DataFrame
new_df = pd.read_excel("C:/Users/User/Desktop/IVF/Fertimed/NN Predictions/2024/I.xlsx")

# Преобразование столбцов в числовой формат, если они не содержат числовые значения
columns_to_convert = ['День переноса']

for col in columns_to_convert:
    new_df[col] = pd.to_numeric(new_df[col], errors='coerce')

new_df['Частота оплодотворения'] = new_df['2 pN'] / new_df['Число инсеминированных']
new_df['Частота дробления'] = new_df['Число дробящихся на 3 день'] / new_df['2 pN']
new_df['Частота формирования бластоцист'] = new_df['Число Bl'] / new_df['2 pN']
new_df['Частота формирования бластоцист хорошего качества'] = new_df['Число Bl хор.кач-ва'] / new_df['2 pN']
new_df['Частота получения ОКК'] = new_df['Число ОКК'] / new_df['Количество фолликулов']

# Создаем функцию для расчета баллов в соответствии с вашими условиями
def calculate_kpi_score(row):
    kpi_score = 0

    # Условия для столбца "Возраст"
    if row['Возраст'] >= 40:
        kpi_score += 1
    elif row['Возраст'] <= 36:
        kpi_score += 5
    else:
        kpi_score += 3

    # Условия для столбца "Количество фолликулов"
    if row['Количество фолликулов'] > 15:
        kpi_score += 5
    elif 8 <= row['Количество фолликулов'] <= 15:
        kpi_score += 3
    else:
        kpi_score += 1

    # Условия для столбца "Число инсеминированных"
    if row['Число инсеминированных'] <= 3:
        kpi_score += 1
    elif 4 <= row['Число инсеминированных'] <= 7:
        kpi_score += 3
    else:
        kpi_score += 5

    # Условия для столбца "Частота оплодотворения"
    if row['Частота оплодотворения'] < 0.5:
        kpi_score += 1
    elif row['Частота оплодотворения'] <= 0.65:
        kpi_score += 3
    else:
        kpi_score += 5

    # Условия для столбца "Число Bl хор.кач-ва"
    if row['Число Bl хор.кач-ва'] == 0:
        kpi_score += 1
    elif row['Число Bl хор.кач-ва'] <= 2:
        kpi_score += 3
    else:
        kpi_score += 5

    return kpi_score

# Применяем функцию для создания столбца "KPIScore"
new_df['KPIScore'] = new_df.apply(calculate_kpi_score, axis=1)
new_data = new_df

# Замена отсутствующих значений на 0 в датафрейме new_df
new_df.fillna(0, inplace=True)

# Выбор признаков для прогнозирования
selected_features = [
    "Возраст", "№ попытки", "Количество фолликулов", "Число ОКК",
    "Число инсеминированных", "2 pN", "Число дробящихся на 3 день",
    "Число Bl хор.кач-ва", "Частота оплодотворения", "Число Bl",
    "Частота дробления", "Частота формирования бластоцист",
    "Частота формирования бластоцист хорошего качества", "Частота получения ОКК",
    "Число эмбрионов 5 дня", "Заморожено эмбрионов", "Перенесено эмбрионов",
    "KPIScore"
]

# Создание нового DataFrame только с выбранными признаками
new_df_selected = new_df[selected_features]

# Замена отсутствующих значений на 0
new_df_selected.fillna(0, inplace=True)

# Нормализация данных
new_data = new_df_selected.values
scaler = StandardScaler()
new_data_normalized = scaler.fit_transform(new_data)
new_data_tensor = torch.from_numpy(new_data_normalized).float()

# Переход модели в режим оценки
model.eval()

# Получение предсказаний для новых данных
with torch.no_grad():
    predictions = model(new_data_tensor).squeeze()
    predicted_probabilities = torch.sigmoid(predictions).numpy()
    predicted_classes = (predicted_probabilities > 0.5).astype(int)

# Добавление предсказанных классов в исходный DataFrame
new_df['Исход переноса'] = predicted_classes

# Вывод предсказаний
print('Предсказанные вероятности:', predicted_probabilities)
print('Предсказанные классы:', predicted_classes)

# Добавление предсказанных классов и вероятностей в DataFrame
new_df['Исход переноса КАН'] = predicted_classes
new_df['Вероятность положительного исхода'] = predicted_probabilities

# Сохранение DataFrame в Excel-файл
new_df.to_excel('предсказания_КАН.xlsx', index=False)

pregnancy_yes_count = (new_df['Исход переноса КАН'] == 1).sum()
total_count = len(new_df['Исход переноса КАН'])
pregnancy_frequency = pregnancy_yes_count / total_count
print(f'ЧНБ_прогноз: {pregnancy_frequency:.2%}')

pregnancy_real_count = (new_df['Исход переноса'] == 1).sum()
total_count = len(new_df['Исход переноса'])
real_pregnancy_frequency = pregnancy_real_count / total_count
print(f'ЧНБ_актуальный: {real_pregnancy_frequency:.2%}')
